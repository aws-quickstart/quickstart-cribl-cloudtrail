AWSTemplateFormatVersion: '2010-09-09'
Description: Cribl LogStream Free Deployment arm64 (qs-1skh1tk5t)
Parameters:
  vpcId:
    Description: 'REQUIRED: ID of your existing VPC.'
    Type: AWS::EC2::VPC::Id
  subnetIds:
    Description: 'REQUIRED: ID of one of your existing Subnet IDs. This subnet must
      be in the same VPC as VPC ID above.'
    Type: List<AWS::EC2::Subnet::Id>
  webAccessCidr:
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: 'REQUIRED: The CIDR IP range permitted to access the LogStream web
      console. We recommend you set this value to a trusted IP range.'
  SQS:
    Description: Name of the SQS for VPCFlow Logs.
    Type: String
    Default: cribl-vpc-sqs
  instanceType:
    Description: EC2 instance type to provision the LogStream instance. If none specified,
      c6g.2xlarge will be used.
    Type: String
    Default: c6g.2xlarge
    AllowedValues:
    - c6g.large
    - c6g.xlarge
    - c6g.2xlarge
    - c6g.4xlarge
    - c6gd.large
    - c6gd.xlarge
    - c6gd.2xlarge
    - c6gd.4xlarge
    - m6g.large
    - m6g.xlarge
    - m6g.2xlarge
    - m6g.4xlarge
    - m6gd.large
    - m6gd.xlarge
    - m6gd.2xlarge
    - m6gd.4xlarge
    ConstraintDescription: Must contain valid instance type
Mappings:
  RegionMap:
    ap-northeast-1:
      ARM64: ami-089cf28c01e447dc4
    ap-northeast-2:
      ARM64: ami-00a8c391e875d3e8f
    ap-south-1:
      ARM64: ami-05bad86d8e45f2b53
    ap-southeast-1:
      ARM64: ami-065d44eb4d87d184d
    ap-southeast-2:
      ARM64: ami-0a462f896ca85bdc8
    ca-central-1:
      ARM64: ami-00eacd1ef07a710dd
    eu-central-1:
      ARM64: ami-0f9bbec03eb9c05a5
    eu-north-1:
      ARM64: ami-0f9f16d9d8e6137dd
    eu-west-1:
      ARM64: ami-00b0e17230e5c1432
    eu-west-2:
      ARM64: ami-0dc935426f5b5974c
    eu-west-3:
      ARM64: ami-00158cea70cbcdb9f
    sa-east-1:
      ARM64: ami-03b8bd38071662914
    us-east-1:
      ARM64: ami-0c1edd67b0134d9b8
    us-east-2:
      ARM64: ami-06b34bffc9d4cdf53
    us-west-1:
      ARM64: ami-0de7551e1ec1c7698
    us-west-2:
      ARM64: ami-0d53c03070323a635
Metadata:
  cfn-lint:
    config:
      ignore_checks:
      - E9007
      ignore_reasons:
      - A combination of Serverless Transform and metadata not being passed through
        (yet) means that we need to globally exclude E9007 until an upstream workaround
        is available.
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Instance Configuration
      Parameters:
      - instanceType
      - SQS
    - Label:
        default: Network Configuration
      Parameters:
      - vpcId
      - subnetIds
      - webAccessCidr
    ParameterLabels:
      instanceType:
        default: EC2 Instance Type
      SQS:
        default: SQS For VPC Flow
      vpcId:
        default: VPC ID
      subnetIds:
        default: Subnet ID
      webAccessCidr:
        default: Web Access CIDR
Outputs:
  logstreamWebUrlPublic:
    Value:
      Fn::Sub: http://${LoadBalancerExternal.DNSName}:9000/login
    Description: Cribl LogStream Web URL (PublicIp)
  logstreamWebAccessCreds:
    Value: admin / EC2 Instance ID
    Description: Default Web Access Credentials
Resources:
  ec2SingleSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cribl LogStream Access
      VpcId:
        Ref: vpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        CidrIp:
          Ref: webAccessCidr
        Description: UI access to the LogStream instance
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0
        Description: Egress access
  LoadBalancerExternal:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
      - Ref: ec2SingleSecurityGroup
      Subnets:
      - Fn::Select:
        - 0
        - Ref: subnetIds
      - Fn::Select:
        - 1
        - Ref: subnetIds
  CriblTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancerExternal
    Properties:
      HealthCheckPort: '9000'
      HealthCheckProtocol: HTTP
      Port: 9000
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Ref: vpcId
  CriblWebListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: CriblTargetGroup
      LoadBalancerArn:
        Ref: LoadBalancerExternal
      Port: 9000
      Protocol: HTTP
  CriblWebListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: CriblTargetGroup
      Conditions:
      - Field: http-request-method
        HttpRequestMethodConfig:
          Values:
          - GET_OR_HEAD
      ListenerArn:
        Ref: CriblWebListener
      Priority: 1
  s3DefaultDestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
      - Key: Name
        Value: Cribl LogStream default destination bucket
  LogstreamRole:
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /logstream/${AWS::StackName}/
      Description: Cribl LogStream default IAM role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: S3Destinations
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
            - s3:GetBucketLocation
            Resource:
            - Fn::Sub: ${s3DefaultDestinationBucket.Arn}
            - Fn::Sub: ${s3DefaultDestinationBucket.Arn}/*
      - PolicyName: S3Sources
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:GetBucketLocation
            Resource:
            - Fn::Sub: ${s3DefaultDestinationBucket.Arn}
            - Fn::Sub: ${s3DefaultDestinationBucket.Arn}/*
      - PolicyName: SQSSources
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:sqs:${AWS::Region}::${AWS::AccountId}::${SQS}
      Tags:
      - Key: Name
        Value: Cribl LogStream IAM role
  iamDefaultInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path:
        Fn::Sub: /logstream/${AWS::StackName}/
      Roles:
      - Ref: LogstreamRole
  ec2WorkersAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::Select:
        - 0
        - Ref: subnetIds
      - Fn::Select:
        - 1
        - Ref: subnetIds
      TargetGroupARNs:
      - Ref: CriblTargetGroup
      DesiredCapacity: '1'
      MaxSize: '1'
      MinSize: '0'
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId:
          Ref: ec2WorkerslaunchTemplate
        Version:
          Fn::GetAtt: ec2WorkerslaunchTemplate.LatestVersionNumber
      Tags:
      - Key: Name
        Value: Cribl LogStream Worker Nodes ASG
        PropagateAtLaunch: false
  ec2WorkersAutoScalingGroupLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: ec2WorkersAutoScalingGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: 3600
      LifecycleHookName: cribl-logstream-worker-shutdown
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
  ec2WorkerslaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceInitiatedShutdownBehavior: terminate
        ImageId:
          Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - ARM64
        InstanceType:
          Ref: instanceType
        IamInstanceProfile:
          Arn:
            Fn::GetAtt: iamDefaultInstanceProfile.Arn
        SecurityGroupIds:
        - Ref: ec2SingleSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Sub:
            - "#cloud-config\nruncmd:\n  - /usr/local/bin/configure_logstream.sh -m\
              \ single -b ${s3DefaultDestinationBucket}\n  - sleep 10\n  - cloud-init\
              \ query -f \"$(cat /opt/cribl_build/users.json.j2)\" > /opt/cribl/local/cribl/auth/users.json\n\
              \  - chown -R cribl:cribl /opt/cribl\n"
            - s3DefaultDestinationBucket:
                Ref: s3DefaultDestinationBucket
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: Cribl LogStream Worker Instance
          - Key: Purpose
            Value: Machine data analysis
  workerShutdownEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Cribl LogStream Worker Shutdown Event
      EventPattern:
        source:
        - aws.autoscaling
        detail-type:
        - EC2 Instance-terminate Lifecycle Action
        detail:
          AutoScalingGroupName:
          - Ref: ec2WorkersAutoScalingGroup
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt: functionWorkerShutdown.Arn
        Id: WorkerShutdownFunction
  lamdbaPermissionWorkerShutdownEventRule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: functionWorkerShutdown
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: workerShutdownEventRule.Arn
  functionWorkerShutdown:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "import boto3\nimport logging\nimport json\nimport time\nimport os\n\
          \nssm = boto3.client('ssm')\nautoscaling = boto3.client('autoscaling')\n\
          \n# Logging\nlog = logging.getLogger()\nlog.setLevel(logging.DEBUG)\n\n\
          def handler(event, context):\n  log.debug(\"Received event {}\".format(json.dumps(event)))\n\
          \n  command = ssm.send_command(\n    InstanceIds=[event['detail']['EC2InstanceId'],],\n\
          \    DocumentName='AWS-RunShellScript',\n    Comment='Gracefully terminate\
          \ Cribl LogStream worker node',\n    Parameters={\"commands\":[\"systemctl\
          \ disable cribl\",\"systemctl daemon-reload\",\"systemctl stop cribl\"],\"\
          workingDirectory\":[\"\"],\"executionTimeout\":[\"3600\"]},\n    CloudWatchOutputConfig={\n\
          \        'CloudWatchOutputEnabled': True\n    }\n  )\n\n  command_id = command['Command']['CommandId']\n\
          \n  for x in range(0,59):\n    time.sleep(10)\n    response = ssm.get_command_invocation(\n\
          \        CommandId=command_id,\n        InstanceId=event['detail']['EC2InstanceId'],\n\
          \    )\n    if response.get('Status') == 'Success':\n      break\n    else:\n\
          \      continue\n\n  autoscaling.complete_lifecycle_action(\n    LifecycleHookName=event['detail']['LifecycleHookName'],\n\
          \    AutoScalingGroupName=event['detail']['AutoScalingGroupName'],\n   \
          \ LifecycleActionToken=event['detail']['LifecycleActionToken'],\n    LifecycleActionResult='CONTINUE',\n\
          \    InstanceId=event['detail']['EC2InstanceId']\n  )\n"
      Description: Cribl LogStream Worker Shutdown
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - functionWorkerShutdownRole
        - Arn
      Runtime: python3.7
      Timeout: 600
      Tags:
      - Key: lambda:createdBy
        Value: SAM
  functionWorkerShutdownRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: functionWorkerShutdownRolePolicy0
        PolicyDocument:
          Statement:
          - Action:
            - ssm:SendCommand
            Effect: Allow
            Resource: '*'
            Condition:
              StringEquals:
                aws:ResourceTag/aws:ec2launchtemplate:id:
                  Ref: ec2WorkerslaunchTemplate
          - Action:
            - ssm:SendCommand
            Effect: Allow
            Resource:
              Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-RunShellScript
          - Action:
            - autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Sub: arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${ec2WorkersAutoScalingGroup}
          - Action:
            - ssm:GetCommandInvocation
            Effect: Allow
            Resource: '*'
      Tags:
      - Key: lambda:createdBy
        Value: SAM
Rules:
  SubnetsInVPC:
    Assertions:
    - Assert:
        Fn::EachMemberIn:
        - Fn::ValueOfAll:
          - AWS::EC2::Subnet::Id
          - VpcId
        - Fn::RefAll: AWS::EC2::VPC::Id
      AssertDescription: All subnets must in the VPC
